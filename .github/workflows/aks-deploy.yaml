name: Deploy AKS

on:
  push:
    paths:
      - 'aks/*'
      - 'global/*'
      - 'cluster-baseline-settings/flux.yml'
      - '.github/workflows/aks-deploy.yaml'
    branches: [ main ]
  pull_request:
    paths:
      - 'aks/*'
      - 'global/*'
      - 'cluster-baseline-settings/flux.yml'
      - '.github/workflows/aks-deploy.yaml'
    branches: [ main ]

env:
  DEFAULT_LOCATION: westeurope
        
jobs:
  deploy-aks-prereq:
    name: Deploy AKS prereq
    runs-on: ubuntu-latest
    outputs:
      resourceGroupName: ${{ steps.create-aks-rgs.outputs.resourceGroupName }}
      acrResourceGroupName: ${{ steps.create-aks-rgs.outputs.acrResourceGroupName }}
      appGatewayControllerIdName: ${{ steps.create-identities.outputs.appGatewayControllerIdName }}
      appGatewayControllerPrincipalResourceId: ${{ steps.create-identities.outputs.appGatewayControllerPrincipalResourceId }}
      ingressControllerPrincipalId: ${{ steps.create-identities.outputs.ingressControllerPrincipalId }}
      ingressControllerClientId: ${{ steps.create-identities.outputs.ingressControllerClientId }}      
      acrId: ${{ steps.deploy-acr.outputs.acrId }}
      acrName: ${{ steps.deploy-acr.outputs.acrName }}
      appInsightsName:  ${{ steps.deploy-appinsights.outputs.appInsightsName }}
      aksClusterName:  ${{ steps.deploy-aks.outputs.aksClusterName }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Login into your Azure Subscription using your Azure credentials - make sure the credentials has write permissions for the specific resource group/subscription. The credentials should be stored in GitHub Secrets - (Go to Settings Tab ->Secrets)
    - name: Azure Login
      uses: Azure/login@v1.1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Create resource groups for AKS and related resources
    - name: Azure CLI - Create AKS and tooling related RGs
      id: create-aks-rgs
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az deployment sub  $([[ ${{ github.event_name }} = pull_request ]] && echo what-if --no-pretty-print || echo create) \
             --name aks-prereqs-rgs --location ${{ env.DEFAULT_LOCATION }} --template-file aks/resource-groups.json \
              --parameters  "@aks/resource-groups.parameters.dev.json" 

          echo "::set-output name=acrResourceGroupName::$(az deployment sub show -n aks-prereqs-rgs --query properties.outputs.acrResourceGroupName.value -o tsv)"
          echo "::set-output name=resourceGroupName::$(az deployment sub show -n aks-prereqs-rgs --query properties.outputs.resourceGroupName.value -o tsv)"

        azcliversion: latest

    # Deploy ACR
    - name: Azure CLI - Deploy ACR
      id: deploy-acr
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |

          az deployment group $([[ ${{ github.event_name }} = pull_request ]] && echo what-if --no-pretty-print || echo create) \
            -f aks/acr.json -g ${{ steps.create-aks-rgs.outputs.resourceGroupName }} \
             -p acrResourceGroupName=${{ steps.create-aks-rgs.outputs.acrResourceGroupName }}  \
             "@aks/acr.parameters.dev.json" 

          echo "::set-output name=acrId::$(az deployment group show -g \
            ${{ steps.create-aks-rgs.outputs.resourceGroupName }} -n acr --query properties.outputs.acrId.value -o tsv)"
          echo "::set-output name=acrName::$(az deployment group show -g \
            ${{ steps.create-aks-rgs.outputs.resourceGroupName }} -n acr --query properties.outputs.acrName.value -o tsv)"

        azcliversion: latest

    # Deploy AppInsights
    - name: Azure CLI - Deploy AppInsights
      id: deploy-appinsights
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |

          az deployment group $([[ ${{ github.event_name }} = pull_request ]] && echo what-if --no-pretty-print || echo create) \
            -f aks/appinsights.json -g ${{ steps.create-aks-rgs.outputs.resourceGroupName }}

          echo "::set-output name=appInsightsName::$(az deployment group show -g \
            ${{ steps.create-aks-rgs.outputs.resourceGroupName }} -n appinsights --query properties.outputs.appInsightsName.value -o tsv)"
  
        azcliversion: latest

    # Create identities for AKS resources 
    - name: Azure CLI - Create identities for AKS resources 
      id: create-identities
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az deployment sub  $([[ ${{ github.event_name }} = pull_request ]] && echo what-if --no-pretty-print || echo create) \
             --name aks-prereqs-identities --location ${{ env.DEFAULT_LOCATION }} --template-file aks/identities-prereqs.json \
             --parameters  "@aks/identities.parameters.dev.json"   "@aks/resource-groups.parameters.dev.json"


          APPGW_CONTROLLER_ID_NAME=`az deployment group show -g ${{ steps.create-aks-rgs.outputs.resourceGroupName }} \
            -n aks-prereqs-identities-identities --query properties.outputs.appGatewayControllerIdName.value -o tsv`

          CLUSTER_NAME=`cat global/cluster-name.parameter.dev.json | jq -r .parameters.clusterName.value`

          APPGW_CONTROLLER_PRINCIPAL_RID=$(az deployment group show -g ${{ steps.create-aks-rgs.outputs.resourceGroupName }} \
            -n aks-prereqs-identities-identities \
            --query properties.outputs.appGatewayControllerPrincipalResourceId.value -o tsv)

          echo "::set-output name=appGatewayControllerIdName::$APPGW_CONTROLLER_ID_NAME"
          echo "::set-output name=appGatewayControllerPrincipalResourceId::$APPGW_CONTROLLER_PRINCIPAL_RID"
          echo "::set-output name=ingressControllerPrincipalId::$(az identity show -g ${{ steps.create-aks-rgs.outputs.resourceGroupName }} \
            -n $APPGW_CONTROLLER_ID_NAME --query principalId -o tsv)"
          echo "::set-output name=ingressControllerClientId::$(az identity show -g ${{ steps.create-aks-rgs.outputs.resourceGroupName }} \
            --ids $APPGW_CONTROLLER_PRINCIPAL_RID --query clientId -o tsv)"

        azcliversion: latest

  configure-admin-user:
    name: Configure admin user
    runs-on: ubuntu-latest
    outputs:
      k8sAdminGroupName: ${{ steps.create-aks-admin-group.outputs.k8sAdminGroupName }}
      k8sAdminGroupId: ${{ steps.create-aks-admin-group.outputs.k8sAdminGroupId }}
      k8sRbacAadProfileTenantId: ${{ steps.save-tenant-id.outputs.k8sRbacAadProfileTenantId }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Login into your Azure Subscription using credentials that can manage the AAD tenant
    - name: Azure Login
      uses: Azure/login@v1.1
      with:
        creds: ${{ secrets.K8S_RBAC_AZURE_CREDENTIALS }}
        allow-no-subscriptions: true

    # Save tenant id
    - name: Azure CLI - Save tenant id
      id: save-tenant-id
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |

          K8S_RBAC_AAD_PROFILE_TENANTID=$(az account show --query tenantId --output tsv)
          
          echo "::set-output name=k8sRbacAadProfileTenantId::$K8S_RBAC_AAD_PROFILE_TENANTID"

        azcliversion: latest



    # Create admin group
    - name: Azure CLI - Create AKS cluster admin group
      id: create-aks-admin-group
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |

          CLUSTER_NAME=`cat global/cluster-name.parameter.dev.json | jq -r .parameters.clusterName.value`
          ADMIN_GROUP=$CLUSTER_NAME-cluster-admin

          echo "Admin group is: ${ADMIN_GROUP}"

          K8S_RBAC_AAD_PROFILE_ADMIN_GROUP_OBJECTID=$(az ad group create --display-name ${ADMIN_GROUP} \
            --mail-nickname ${ADMIN_GROUP} --query objectId -o tsv)
          
          echo "::set-output name=k8sAdminGroupName::$ADMIN_GROUP"
          echo "::set-output name=k8sAdminGroupId::$K8S_RBAC_AAD_PROFILE_ADMIN_GROUP_OBJECTID"

        azcliversion: latest

    # Create admin user and add it to admin group
    - name: Azure CLI - Create AKS cluster admin user
      id: create-aks-admin-user
      uses: Azure/cli@v1.0.0
      if: ${{ false }}
      with:
        inlineScript: |

          CLUSTER_NAME=`cat global/cluster-name.parameter.dev.json | jq -r .parameters.clusterName.value`
          USER=$CLUSTER_NAME-admin

          UPN=$USER@${{ secrets.K8S_ADMIN_TENANT_DOMAIN }}
          PASSWORD=${{ secrets.K8S_ADMIN_PASSWORD }}

          AKS_ADMIN_OBJECTID=$(az ad user create --display-name=$USER \
            --user-principal-name $UPN --password $PASSWORD --query objectId -o tsv 2>&1)
          # check if user was already created
          status=$?
          if [[ $status -eq 0 ]]
          then
            echo "User created"
          else
            if [[ $AKS_ADMIN_OBJECTID == *"userPrincipalName already exists"* ]]
            then
              echo "User already exists, continue..."
              AKS_ADMIN_OBJECTID=$(az ad user list --upn $UPN --query [0].objectId -o tsv)
            else
              echo $AKS_ADMIN_OBJECTID
              exit 1
            fi
          fi       

          USER_TO_GROUP=$(az ad group member add --group ${{ steps.create-aks-admin-group.outputs.k8sAdminGroupName }} \
            --member-id $AKS_ADMIN_OBJECTID 2>&1)
          # check if user was already in group
          status=$?
          if [[ $status -eq 0 ]]
          then
            echo "User added to group"
          else
            if [[ $USER_TO_GROUP == *"One or more added object references already exist"* ]]
            then
              echo "User already exists in group, continue..."
            else
              echo $USER_TO_GROUP
              exit 1
            fi
          fi 

          echo "Admin user is: $UPN"

        azcliversion: latest

  deploy-aks:
    name: Deploy AKS
    needs: [deploy-aks-prereq, configure-admin-user]
    runs-on: ubuntu-latest
    outputs:
      aksClusterName:  ${{ steps.deploy-aks.outputs.aksClusterName }}
      agwName:  ${{ steps.deploy-aks.outputs.agwName }}      
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Login into your Azure Subscription using your Azure credentials - make sure the credentials has write permissions for the specific resource group/subscription. The credentials should be stored in GitHub Secrets - (Go to Settings Tab ->Secrets)
    - name: Azure Login
      uses: Azure/login@v1.1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Create resources for AKS and related resources
    - name: Azure CLI - Deploy AKS 
      id: deploy-aks
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |

          RG=${{needs.deploy-aks-prereq.outputs.resourceGroupName}}
          SPOKES_RG_NAME=`cat networking/networking.parameters.dev.json | jq -r '.parameters."spokes-rg-name"'.value`
          TARGET_VNET_RESOURCE_ID=$(az deployment group show -g $SPOKES_RG_NAME -n spoke-default --query properties.outputs.clusterVnetResourceId.value -o tsv)

          K8S_VERSION=$(az aks get-versions --location ${{ env.DEFAULT_LOCATION }} \
            --query 'orchestrators[?!isPreview] | [-1].orchestratorVersion' --output tsv)

          echo "Installing Kubernetes $K8S_VERSION"

          az deployment group  $([[ ${{ github.event_name }} = pull_request ]] && echo what-if --no-pretty-print || echo create) \
             --resource-group $RG --template-file aks/cluster-stamp.json \
             --parameters targetVnetResourceId=$TARGET_VNET_RESOURCE_ID \
             k8sRbacAadProfileAdminGroupObjectID=${{needs.configure-admin-user.outputs.k8sAdminGroupId}}   \
             k8sRbacAadProfileTenantId=${{needs.configure-admin-user.outputs.k8sRbacAadProfileTenantId}} \
             appGatewayListenerCertificate=${{ secrets.APP_GATEWAY_LISTENER_CERTIFICATE }} \
             ingressControllerIdName=${{needs.deploy-aks-prereq.outputs.appGatewayControllerIdName}} \
             ingressControllerPrincipalId=${{needs.deploy-aks-prereq.outputs.ingressControllerPrincipalId}} \
             acrResourceGroupName=${{needs.deploy-aks-prereq.outputs.acrResourceGroupName}} \
             acrName=${{needs.deploy-aks-prereq.outputs.acrName}} \
             location=${{ env.DEFAULT_LOCATION }} \
             kubernetesVersion=$K8S_VERSION \
             apwBaseDomain=${{ secrets.APP_GATEWAY_BASE_DOMAIN }} \
             spokesRgName=$SPOKES_RG_NAME \
             "@global/cluster-name.parameter.dev.json"

          echo "::set-output name=aksClusterName::$(az deployment group show -g $RG \
            -n cluster-stamp --query properties.outputs.aksClusterName.value -o tsv)"
          echo "::set-output name=agwName::$(az deployment group show -g $RG \
            -n cluster-stamp --query properties.outputs.agwName.value -o tsv)"

        azcliversion: latest

  deploy-flux:
    name: Deploy Flux
    needs: [deploy-aks-prereq, deploy-aks]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Set the target Azure Kubernetes Service (AKS) cluster. 
    - name: Set AKS context
      uses: azure/aks-set-context@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        cluster-name: ${{needs.deploy-aks.outputs.aksClusterName}}
        resource-group: ${{needs.deploy-aks-prereq.outputs.resourceGroupName}}

    # Create  cluster-baseline-settings ns in AKS
    - name: Create cluster-baseline-settings ns
      uses: azure/k8s-deploy@v1
      with:
        manifests: |
          cluster-baseline-settings/ns-cluster-baseline-settings.yaml

    # Deploy flux in AKS
    - name: Deploy flux 
      uses: azure/k8s-deploy@v1
      with:
        manifests: |
          cluster-baseline-settings/flux.yaml
        namespace: cluster-baseline-settings

  configure-agic:
    name: Configure App GW Ingress Controller
    runs-on: 'ubuntu-latest'
    needs: [deploy-aks-prereq, deploy-aks, deploy-flux]
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Login into your Azure  to be able to get subscription id
    - name: Azure Login
      uses: Azure/login@v1.1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Set the target Azure Kubernetes Service (AKS) cluster and init KUBECONFIG env var
    - name: Set AKS context
      uses: azure/aks-set-context@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        cluster-name: ${{needs.deploy-aks.outputs.aksClusterName}}
        resource-group: ${{needs.deploy-aks-prereq.outputs.resourceGroupName}}

    - name: Setup helm
      uses: azure/setup-helm@v1
      id: install

    - name: Deploy AGIC in K8s
      shell: bash
      run: |

        helm repo add application-gateway-kubernetes-ingress https://appgwingress.blob.core.windows.net/ingress-azure-helm-package/
        helm repo update
        # harcoded to 1.4.0 
        INGRESS_VERSION=1.4.0

        helm install ingress-azure-dev application-gateway-kubernetes-ingress/ingress-azure \
          --namespace kube-system \
          --set appgw.name=${{ needs.deploy-aks.outputs.agwName }} \
          --set appgw.resourceGroup=${{ needs.deploy-aks-prereq.outputs.resourceGroupName }} \
          --set appgw.subscriptionId=$(az account show --query id --output tsv) \
          --set appgw.shared=false \
          --set kubernetes.watchNamespace="" \
          --set armAuth.type=aadPodIdentity \
          --set armAuth.identityResourceID=${{ needs.deploy-aks-prereq.outputs.appGatewayControllerPrincipalResourceId }} \
          --set armAuth.identityClientID=${{ needs.deploy-aks-prereq.outputs.ingressControllerClientId }} \
          --set rbac.enabled=true \
          --set verbosityLevel=3 \
          --set aksClusterConfiguration.apiServerAddress=$(az aks show -n ${{needs.deploy-aks.outputs.aksClusterName}} -g ${{needs.deploy-aks-prereq.outputs.resourceGroupName}} --query fqdn -o tsv) \
          --set appgw.usePrivateIP=false \
          --version $INGRESS_VERSION